#!/bin/bash
# netcardconfig - A very light-weight text-based network configuration tool.
# (C) Klaus Knopper Nov 2002
# (C) 2006 Niall Walsh to integrate wlan cards
# (C) 2004-2007 by Stefan Lippers-Hollmann <s.l-h@gmx.de>
# (C) 2007 by Horst Tritremmel <hjt@sidux.com>

PATH="/bin:/sbin:/usr/bin:/usr/sbin"
export PATH

[ "$UID" -ne 0 ] && exec su-me $0 "$@"

bailout() {
	rm -f "$TMP"
	exit $1
}

# This function produces the IWOURLINE for interfaces
writeiwline() {
	IWOURLINE=""
	if [ -n "$NWID" ]; then 
		IWOURLINE="$IWOURLINE wireless-nwid $NWID\n"
	fi
	
	if [ -n "$MODE" ]; then 
		IWOURLINE="$IWOURLINE wireless-mode $MODE\n"
	fi
	
	if [ -n "$CHANNEL" ]; then 
		IWOURLINE="$IWOURLINE wireless-channel $CHANNEL\n"
	fi
	
	if [ -n "$FREQ" ]; then 
		IWOURLINE="$IWOURLINE wireless-freq $FREQ\n"
	fi
	
	if [ -n "$KEY" ]; then
		if [ "$PUBKEY" -eq 1 ]; then
			# Store the key in interfaces in wireless-key
			IWOURLINE="$IWOURLINE wireless-key $KEY\n"
		else
			# Store the key in /etc/network/wep.$DV which is root readable only
			# Use pre-up in interfaces to read and set it
			echo "$KEY" > /etc/network/wep.$DV && chmod 700 /etc/network/wep.$DV && IWOURLINE="$IWOURLINE pre-up KEY=\$(cat /etc/network/wep.$DV) && iwconfig $DV key \$KEY\n"
		fi
	fi
	
	[ -d /sys/module/rt2??0/ ] && IWPREUPLINE="$IWPREUPLINE pre-up /sbin/ifconfig $DV up\n"
	
	if [ -n "$IWCONFIG" ]; then 
		IWPREUPLINE="$IWPREUPLINE iwconfig $IWCONFIG\n"
	fi
	
	if [ -n "$IWSPY" ]; then 
		IWPREUPLINE="$IWPREUPLINE iwspy $IWSPY\n"
	fi
	
	if [ -n "$IWPRIV" ]; then 
		IWPREUPLINE="$IWPREUPLINE iwpriv $IWPRIV\n"
	fi
	
	# execute ESSID last, but make sure that it is written as first option
	if [ -n "$ESSID" ]; then 
		IWOURLINE="$IWOURLINE wireless-essid $ESSID\n"
	fi
	
	if [ $WPAON -gt 0 ]; then
		IWOURLINE="$IWOURLINE wpa-ssid $ESSID\n wpa-psk $WPASECRET\n"
	fi
	
	IWOURLINE="$IWOURLINE $IWPREUPLINE"
	#echo "DEBUG: for interfaces $IWOURLINE"
}

device2props() {
	PARTCOUNT=0
	isauto=0
	isfirewire=0
	iswireless=0
	driver=""
	mac=""
	for PART in $DEVICE; do
		if [ $PARTCOUNT -eq 0 ]; then
			DEVICENAME=$PART
		else
			echo $PART | grep -q A::1 && isauto=1
			echo $PART | grep -q F::1 && isfirewire=1
			echo $PART | grep -q W::1 && iswireless=1
			[ -z "$driver" ] && driver=$(echo $PART|awk 'BEGIN {FS="::"} /^D:/{print $2}')
			[ -z "$mac" ] && mac=$(echo $PART|awk 'BEGIN {FS="::"} /^M:/{print $2}')
		fi
		((PARTCOUNT++))
	done
}

props2string() {
	MY_DEVICE_NAME=""
	[ $isfirewire -gt 0 ] && MY_DEVICE_NAME="Firewire_device"
	[ -z "$MY_DEVICE_NAME" -a $iswireless -gt 0 ] && MY_DEVICE_NAME="Wireless_device"
	[ -z "$MY_DEVICE_NAME" ] && MY_DEVICE_NAME="Network_device"
	MY_DEVICE_NAME="$DEVICENAME $MY_DEVICE_NAME $mac $driver"
	[ $isauto -gt 0 ] && MY_DEVICE_NAME="$MY_DEVICE_NAME Auto"
	MY_DEVICE_NAME=$(echo $MY_DEVICE_NAME | sed 's/\ /__/g')
}

addauto() {
	if ! egrep -e "^auto[  ]+.*$DV" /etc/network/interfaces >/dev/null; then
		awk '{if(/^auto/){if(done==0){print $0 " '"$DV"'";done=1}else{print}}else{print}}END{if(done==0){print "auto '$DV'"}}' "/etc/network/interfaces" > "$TMP"
		cat "$TMP" > /etc/network/interfaces
	fi
}

remauto(){
	if egrep -e "^auto[  ]+.*$DV" /etc/network/interfaces >/dev/null; then
		perl -pi -e 's/^(auto.*)'$DV'(.*)$/$1$2/;' /etc/network/interfaces
	fi
}

configiface() {
	[ ! -r /etc/network/interfaces ] && touch /etc/network/interfaces
	DEVICE=${NETDEVICES[$DV]}
	device2props
	DV=$DEVICENAME
	# wireless config
	WLDEVICE="$(LANG=C LC_MESSAGEWS=C iwconfig $DV 2>/dev/null | awk '/802\.11|READY|ESSID/{print $1}')"
	WLDEVICECOUNT="$(LANG=C LC_MESSAGEWS=C iwconfig $DV 2>/dev/null | wc -l)"
	if [ $iswireless -gt 0 ] && ssft_yesno "" "Setup wireless options?"; then
		ESSID=""
		NWID=""
		MODE=""
		CHANNEL=""
		FREQ=""
		SENS=""
		RATE=""
		KEY=""
		RTS=""
		FRAG=""
		IWCONFIG=""
		IWSPY=""
		IWPRIV=""
		
		if [ -f /etc/network/interfaces ]; then
			awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}} 
				/essid/{if(found){for(i=NF;i>=2;i--)essid=$i "~" essid}}
				/nwid/{if(found){nwid=$NF}}
				/mode/{if(found){mode=$NF}}
				/channel/{if(found){channel=$NF}}
				/freq/{if(found){freq=$NF}}
				/sens/{if(found){sens=$NF}}
				/rate/{if(found){rate=$NF}}
				/rts/{if(found){rts=$NF}}
				/frag/{if(found){frag=$NF}}
				/iwconfig/{if(!/KEY/){if(found){iwconfig=$NF}}}
				/iwspy/{if(found){iwspy=$NF}}
				/iwpriv/{if(found){iwpriv=$NF}}
				/wireless[-_]key/{if(found){gsub(/^\W*wireless[-_]key\W*/,"");key=$0}}
				END{
					if (!(length(essid))){essid="~~~"}
					if (!(length(nwid))){nwid="~~~"}
					if (!(length(mode))){mode="~~~"}
					if (!(length(channel))){channel="~~~"}
					if (!(length(freq))){freq="~~~"}
					if (!(length(sens))){sens="~~~"}
					if (!(length(rate))){rate="~~~"}
					if (!(length(rts))){rts="~~~"}
					if (!(length(frag))){frag="~~~"}
					if (!(length(iwconfig))){iwconfig="~~~"}
					if (!(length(iwspy))){iwspy="~~~"}
					if (!(length(iwpriv))){iwpriv="~~~"}
					if (!(length(key))){key="~~~"}
					print essid" "nwid" "mode" "channel" "freq" "sens" "rate" "rts" "frag" "iwconfig" "iwspy" "iwpriv" "key
				}' /etc/network/interfaces >"$TMP"
			
			read ESSID NWID MODE CHANNEL FREQ SENS RATE RTS FRAG IWCONFIG IWSPY IWPRIV KEY<"$TMP"
			
			[ "$ESSID" = "~~~" ] &&		ESSID=""
			[ "$NWID" = "~~~" ] &&		NWID=""
			[ "$MODE" = "~~~" ] &&		MODE=""
			[ "$CHANNEL" = "~~~" ] &&	CHANNEL=""
			[ "$FREQ" = "~~~" ] &&		FREQ=""
			[ "$SENS" = "~~~" ] &&		SENS=""
			[ "$RATE" = "~~~" ] &&		RATE=""
			[ "$RTS" = "~~~" ] &&		RTS=""
			[ "$FRAG" = "~~~" ] &&		FRAG=""
			[ "$IWCONFIG" = "~~~" ] &&	IWCONFIG=""
			[ "$IWSPY" = "~~~" ] &&		IWSPY=""
			[ "$IWPRIV" = "~~~" ] &&	IWPRIV=""
			[ "$KEY" = "~~~" ] &&		KEY=""
			
			ESSID=$(echo $ESSID | tr "~" " " | sed 's/ *$//')
			
			if [ -z "$KEY" ]; then
				KEY=$(cat /etc/network/wep.$DV 2>/dev/null)
				
				if [ -z "$KEY" ]; then
					PUBKEY=0
				else
					PUBKEY=-1
				fi
			else
				PUBKEY=1
			fi
			
			#echo "DEBUG:E:$ESSID N:$NWID M:$MODE C:$CHANNEL F:$FREQ S:$SENS R:$RATE K:$KEY R:$RTS F:$FRAG I:$IWCONFIG I:$IWSPY I:$IWPRIV"
			rm -f "$TMP"
		fi
			
		VAR="ESSID";   ssftreadfunc "${!VAR}" "Enter the ESSID for $DEVICENAME \n\n\n(empty for 'any', not recommended !)\n"; [ -z "$ESSID" ] && ESSID="any"

		VAR="NWID";    ssftreadfunc "${!VAR}" "Enter the NWID (cell identifier)\nfor $DEVICENAME, if needed\n\n\n"
	
		VAR="MODE";    ssftreadfunc "${!VAR}" "Enter the mode for $DEVICENAME\n\n(Managed(=default), Ad-Hoc, Master,\nRepeater, Secondary, auto)\n"; [ -z "$MODE" ] && MODE="Managed"

		VAR="CHANNEL"; ssftreadfunc "${!VAR}" "Enter channel number for $DEVICENAME \n\n(0 bis 16, empty for auto or if you want to\n enter the frequency next)\n"

		if [ -z "$CHANNEL" ]; then
			VAR="FREQ"; ssftreadfunc "${!VAR}" "Enter the frequency for $DEVICENAME \n\n(e.g 2.412G, empty for auto)"
		fi

		WPAON=0
		IWDRIVER=$driver
			
		case $IWDRIVER in
			*)
				WPA_DEV="wext"
				;;
		esac
			
		if [ -z "$WPA_DEV" ]; then
			if [ -d /proc/net/hostap/$DV ]; then
				WPA_DEV=hostap
			elif [ $WLDEVICECOUNT -eq 1 ]; then
				if [ -e /proc/driver/atmel ]; then
					WPA_DEV=atmel
				fi
			fi
		fi
			
			WPAON=-1
			
		if [ -n "$WPA_DEV" ]; then
			if ssft_yesno "" "Enable WPA support?"; then
				# Other wpa options
				# scan_ssid [0]|1
				# bssid 00:11:22:33:44:55
				# priority [0]|Integer
				# proto [WPA RSN] WPA|RSN
				# key_mgmt [WPA-PSK WPA-EAP]|NONE|WPA-PSK|WPA-EAP|IEEE8021X
				# pairwise [CCMP TKIP]|CCMP|TKIP|NONE
				# group [CCMP TKIP WEP105 WEP40]|CCMP|TKIP|WEP105|WEP40
				# eapol_flags [3]|1|2
				
				WPAON=1
				KEY=""
				WPASECRET=$(awk '
					/iface/{
						if(found){
							found=0
						}
						else if (/'"$DV"'/){
							found=1
						}
					}
					/wpa-psk/{
						if(found){
							gsub(/\W*#.*$/,"");
							if (gsub(/^\W*wpa-psk\W*/,"")){
								gsub(/\W.*$/,"");
								print;
								exit;
							}
						}
					}
					' /etc/network/interfaces)
				VAR="WPASECRET"; ssftreadfunc "${!VAR}" "Enter the WPA Passphrase\nfor $ESSID"
				
				case $WPA_DEV in
					hostap)
					MODE="Managed"
					;;
				esac
			else
				WPASECRET=""
			fi
		else
			WPASECRET=""
		fi
		
		# No need for a wep key if we are using wpa
		if [ ! $WPAON -eq 1 ]; then
			VAR="KEY"; ssftreadfunc "${!VAR}" "Enter the encryption key\nfor $DEVICENAME \n\n(empty for cleartext, not recommended!!)"
		
			if [ -n "$KEY" -a "$PUBKEY" -eq 0 ]; then
				if ! ssft_yesno "" "Would you like to store your wep key in it's own private file ($DEVICENAME)? If you say no, your wep key will be stored in /etc/network/interfaces and will be readable by any account on your system.  You may want to 'chmod 700 /etc/network/interfaces' if you answer no to this question"; then
					PUBKEY=1
				fi
			fi
		fi
		
		VAR="IWCONFIG"; ssftreadfunc "${!VAR}" "Enter additional parameters for\n'iwconfig $DEVICENAME' if needed, e.g.\n\n\nsens -80  rts 512  frag 512  rate 5.5M"
		
		VAR="IWSPY";    ssftreadfunc "${!VAR}" "Enter additional parameters for\n'iwspy $DEVICENAME' if needed\n\n\n"
	
		VAR="IWPRIV";   ssftreadfunc "${!VAR}" "Enter additional parameters for\n'iwpriv $DEVICENAME' if needed\n\n\n"

		writeiwline
	fi
	
	if ssft_yesno "" "Use DHCP broadcast?"; then
		if [ -w /etc/network/interfaces ]; then
			rm -f "$TMP"
			awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}}
				/^\W$/{if(blank==0){lastblank=1}else{lastblank=0}{blank=1}}
				/\w/{blank=0;lastblank=0}
				{if(!(found+lastblank)){print}}
				END{print "iface '"$DV"' inet dhcp"}' \
				/etc/network/interfaces >"$TMP"
			echo -e "$IWOURLINE" >> $TMP
			cat "$TMP" >/etc/network/interfaces
			rm -f "$TMP"

			# Add an "auto" entry
			#addauto
		fi
	else
	if [ -f /etc/network/interfaces ]; then
		awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}} 
			/address/{if(found){address=$NF}}
			/netmask/{if(found){netmask=$NF}}
			/broadcast/{if(found){broadcast=$NF}}
			/gateway/{if(found){gateway=$NF}}
			END{print address" "netmask" "broadcast" "gateway}' /etc/network/interfaces >"$TMP"
		read IP NM BC DG <"$TMP"
		rm -f "$TMP"
	fi
	
	VAR="IP"; ssftreadfunc "${IP:-192.168.0.1}" "Please enter IP Address for $DV"

	VAR="NM"; ssftreadfunc "${NM:-255.255.255.0}" "Please enter Network Mask for $DV"

	VAR="BC"; ssftreadfunc "${BC:-${IP%.*}.255}" "Please enter Broadcast Address for $DV"
	
	VAR="DG"; ssftreadfunc "${DG:-${IP%.*}.254}" "Please enter Default Gateway"

	if [ -f "/etc/resolv.conf" ]; then
		NS="$(awk '/^nameserver/{printf "%s ",$2}' /etc/resolv.conf)"
	fi
	
	VAR="NS"; ssftreadfunc "${NS:-${IP%.*}.254}" "Please enter Nameserver(s)"
	
	if [ -w /etc/network/interfaces ]; then
		awk	'/iface/{if(/'"$DV"'/){found=1}else{found=0}}
			{if(!found){print}}
			END{print "\niface '"$DV"' inet static\n\taddress '"$IP"'\n\tnetmask '"$NM"'\n\tnetwork '"${IP%.*}.0"'";if("'"$BC"'"!=""){print "\tbroadcast '"$BC"'"};if("'"$DG"'"!=""){print "\tgateway '"$DG"'"};if("'"$IWOURLINE"'"!=""){print "'"$IWOURLINE"'"};print "\n"}' \
			/etc/network/interfaces >"$TMP"
		
		cat "$TMP" >/etc/network/interfaces
		rm -f "$TMP"
		
		# Add an "auto" entry
		#addauto
	fi
	
	if [ -n "$NS" ]; then
		more=""
		
		for i in $NS; do
			if [ -z "$more" ]; then
				more=yes
				echo "Setting Nameserver in /etc/resolv.conf to $i"
				echo "nameserver $i" >/etc/resolv.conf
			else
				echo "Adding Nameserver to /etc/resolv.conf: $i"
				echo "nameserver $i" >>/etc/resolv.conf
			fi
		done
		fi
	fi

	echo "Done."
}

TMP="$(mktemp -p /tmp/ netcardconfig-XXXXXXXXXX)"


ssftreadfunc() {
#	SSFT_DEFAULT=$1; [ "$SSFT_DEFAULT" == "" ] && SSFT_DEFAULT="_"
#	ssft_read_string "" "$2"  || bailout 1
#	unset SSFT_DEFAULT
#	read $VAR << EOT
#$(echo $SSFT_RESULT | sed -e 's/^_//g')
#EOT

	# empty strings doesn't work with ssft_read_string or kdialog :(
	if [ -n "$DISPLAY" ]; then
		itext=$(echo "${2}" | sed -e 's%\\n%\
%g')

		msg=$(zenity --entry --title="" --text="${itext}" --entry-text="${1}" || printf "goodbye\n" )
		[ "${msg}" = goodbye ] && bailout 1

		read $VAR << EOT
$(printf "${msg}\n")
EOT

	else
		rm -f "$TMP"
		dialog --inputbox "${2}" 15 50 "${1}" 2>"$TMP" || bailout 1
		read $VAR <"$TMP" ; rm -f "$TMP"
	fi

}

# determine system status
SSFTSH="$(which ssft.sh)"			|| SSFTSH="/usr/bin/ssft.sh"

# initialize ssft
#[ -n "$DISPLAY" ] && [ -x /usr/bin/kdialog ] && SSFT_FRONTEND="kdialog"
. "$SSFTSH"
[ -n "$SSFT_FRONTEND" ] ||  SSFT_FRONTEND="$(ssft_choose_frontend)"

NETDEVICESCOUNT=0
LAN=$(tail -n +3 /proc/net/dev|awk -F: '{print $1}'|sed "s/\s*//"|grep -v -e ^lo -e ^vmnet|sort)
WLAN=$(tail -n +3 /proc/net/wireless|awk -F: '{print $1}'|sort)
unset LAN_DEVICES WLAN_DEVICES FIREWIRE_DEVICES NETDEVICES
while read dev mac; do
	#echo "Making NETDEVICES $NETDEVICESCOUNT $dev"
	iswlan=$(echo $dev $WLAN|tr ' ' '\n'|sort|uniq -d)
	isauto="0"
	grep auto /etc/network/interfaces | grep -q $dev && isauto="1"
	driver=$(ethtool -i $dev 2>/dev/null|awk '/^driver:/{print $2}')
	if [ "$driver" ]; then
		if [ "$iswlan" ]; then
			NETDEVICES[$NETDEVICESCOUNT]="$dev A::$isauto M::$mac D::$driver W::1 F::0"
		else
			NETDEVICES[$NETDEVICESCOUNT]="$dev A::$isauto M::$mac D::$driver W::0 F::0"
		fi
	else
		if [ "$iswlan" ]; then
			NETDEVICES[$NETDEVICESCOUNT]="$dev A::$isauto M::$mac W::1 F::0"
		else
			NETDEVICES[$NETDEVICESCOUNT]="$dev A::$isauto M::$mac W::0 F::0"
		fi
	fi
	#echo "Made to ${NETDEVICES[$NETDEVICESCOUNT]}"
	((NETDEVICESCOUNT++))
done < <(ifconfig -a|grep Ethernet|grep -v ^vmnet|awk '! /^\s/{print $1" "$5}')

for dev in $LAN; do
	if [ "$(ethtool -i $dev 2>/dev/null|awk '/^bus-info:/{print $2}')" == "ieee1394" ]; then
		isauto="0"
		grep auto /etc/network/interfaces | grep -q $dev && isauto="1"
		NETDEVICES[$NETDEVICESCOUNT]="$dev A::$isauto D::$(ethtool -i $dev 2>/dev/null|awk '/^driver:/{print $2}') W::0 F::1"
		((NETDEVICESCOUNT++))
	fi
done

#NETDEVICES="$(cat /proc/net/dev | awk -F: '/eth.:|lan.:|tr.:|wlan.:|ath.:|ra.:/{print $1}')"

if [ -z "$NETDEVICES" ]; then
	ssft_display_message "" "No supported network cards found."
	bailout
fi

count="$NETDEVICESCOUNT"

if [ "$count" -gt 1 ]; then
	DEVICELIST=""
	mycount=0
	while [ $mycount -lt $count ]; do
		DEVICE=${NETDEVICES[$mycount]}
		#echo "$mycount is $DEVICE"
		device2props
		#echo "name: $DEVICENAME auto: $isauto fw: $isfirewire mac: $mac driver: $driver"
		props2string
##		DEVICELIST="$DEVICELIST $mycount $MY_DEVICE_NAME"
		DEVICELIST="$DEVICELIST ${mycount})_${MY_DEVICE_NAME}"
		((mycount++))
		TMP=`echo $MY_DEVICE_NAME | cut -f1 -d_`;
		if [ "$1" = "$TMP" ]; then
			selectedCard=$mycount; fi
	done
fi

# To translate
##EXITKEY="E"
##EXITMENU="$EXITKEY Exit"
EXITMENU="Exit"

# main program loop until they bailout
while (true); do
	# first get the device
	if [ -n "$selectedCard" ]; then
		DV=$selectedCard-1
	else
		if [ "$count" -gt 1 ]; then
			ssft_select_single "Device" "Please select network device" $DEVICELIST $EXITMENU  || bailout

			DV=$(echo "$SSFT_RESULT" | cut -d\) -f1)
			[ "$SSFT_RESULT" = "$EXITMENU" ] && bailout
		else
			#Only one device
			DV=0
			# they have asked to stop configuring the interface so exit
			[ -z "$IFACEDONE" ] || bailout
 		fi

	fi 

	# device config loop
	IFACEDONE=""
	while [ -n "$DV" -a -z "$IFACEDONE" ]; do
		configiface

		ifdown $DV
		sleep 3
		if ! ifup $DV; then
			ssft_yesno "" "Failed to bring up the interface, would you like to reconfigure it?" || IFACEDONE="DONE"
		else
			ssft_yesno "" "Interface enabled, do you want it auto enabled at boot?" && addauto || remauto
			IFACEDONE="DONE"
		fi
	done
	if [ "$selectedCard" != "" ]; then
		bailout 
	fi
done
